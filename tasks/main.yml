---
# tasks file for ansible-role-docker
- name: Configure Security-enhanced
  block: 
    - name: Set selinux permissive module on RedHat family
      ansible.posix.selinux:
        policy: targeted
        state: permissive
      when: ansible_facts['os_family'] == 'RedHat'
    
    - name: Add firewall-cmd docker communication on RedHat family
      include_tasks: common/el/firewall-cmd.yaml
      when: ansible_facts['os_family'] == 'RedHat'

- name: Install pre-requisites for docker
  block: 
    - name: Install dependencies for CentOS
      include_tasks: common/el/docker-centos-deps.yaml
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Install Dependencies for Ubuntu
      apt:
        name: "{{ item }}"
        state: latest
      loop: [ 'apt-transport-https', 'ca-certificates', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools', "gnupg", "lsb-release" ]
      when: ansible_facts['os_family'] == 'Debian'

- name: Install docker packages
  block: 
    - name: Add yum repository docker-ce for CentOS
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: 0644
      when: ansible_facts['distribution'] == 'CentOS'
    
    - name: Add apt repository docker-ce for Ubuntu
      include_tasks: package/debian/docker-ubuntu.yaml
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install dockerd
      package:
        name: "{{ item }}"
        state: latest
      loop: [ "docker-ce", "docker-ce-cli", "containerd.io", "docker-buildx-plugin", "docker-compose-plugin" ]

    - name: Start docker daemon
      service:
        name: docker
        state: started
        daemon_reload: yes
        enabled: yes

- name: Post-Install docker, executeable non-root
  ansible.builtin.user:
    name: "{{ normal_user }}"
    groups: docker
    append: yes
  when: normal_user

- name: Post-Install docker, config daemon.json
  include_tasks: config/docker-daemon-conf.yaml

- name: Log into private registry and force re-authorization
  shell: 
      cmd: docker login -u {{ item.auth.user }} -p {{ item.auth.password }} {{ item.url }}
  when: item.auth.docker_login
  loop: "{{ docker_insecure_registries_conf | list }}"
